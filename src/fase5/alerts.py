"""
Sistema de Alertas para monitoramento de condi√ß√µes cr√≠ticas
"""
import streamlit as st
import pandas as pd
from datetime import datetime
import logging
from typing import List, Dict
from pathlib import Path
import json
import re
from fase5.aws_sns import SNSManager

class AlertSystem:
    def __init__(self):
        self.alerts = []
        self.sns_manager = SNSManager()
        self.setup_logging()
        # Controle de spam de emails
        self.last_email_sent = {}  # Armazena timestamp do √∫ltimo email por tipo
        self.email_cooldown = 300  # 5 minutos entre emails do mesmo tipo
        self.last_alert_state = {}  # Armazena √∫ltimo estado para detectar mudan√ßas
    
    def setup_logging(self):
        """Configura o sistema de logs"""
        log_dir = Path(__file__).parent.parent.parent / "logs"
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            filename=str(log_dir / 'alerts.log'),
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
    
    def is_valid_email(self, email: str) -> bool:
        """Valida o formato do email"""
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return bool(re.match(pattern, email))
    
    def add_recipient(self, email: str) -> bool:
        """Adiciona um novo destinat√°rio"""
        if not self.is_valid_email(email):
            st.error("‚ùå Formato de email inv√°lido!")
            return False
        
        # Tenta inscrever o email no SNS
        if self.sns_manager.subscribe_email(email):
            st.success(f"‚úÖ Email {email} inscrito! Por favor, verifique sua caixa de entrada para confirmar a inscri√ß√£o.")
            return True
        else:
            st.error("‚ùå Erro ao inscrever email. Verifique os logs para mais detalhes.")
            return False
    
    def remove_recipient(self, email: str):
        """Remove um destinat√°rio"""
        if self.sns_manager.unsubscribe_email(email):
            st.success(f"‚úÖ Email {email} removido com sucesso!")
        else:
            st.error("‚ùå Erro ao remover email. Verifique os logs para mais detalhes.")
    
    def test_sns_alert(self):
        """Testa o envio de alerta via SNS"""
        if self.sns_manager.publish_test_message():
            st.success("‚úÖ Alerta de teste enviado com sucesso!")
        else:
            st.error("‚ùå Erro ao enviar alerta de teste!")
    
    def check_humidity_alert(self, humidity: float, logger=None) -> bool:
        """Verifica se a umidade est√° em n√≠veis cr√≠ticos"""
        alert_type = "humidity"
        current_state = None
        
        if humidity < 45:
            current_state = "low"
            message = f"Umidade muito baixa: {humidity:.1f}%"
        elif humidity > 55:
            current_state = "high"
            message = f"Umidade muito alta: {humidity:.1f}%"
        else:
            current_state = "normal"
            # Se voltou ao normal, limpa o estado anterior
            if alert_type in self.last_alert_state:
                del self.last_alert_state[alert_type]
            return False
        
        # Verifica se houve mudan√ßa de estado ou se passou tempo suficiente
        should_send_email = self._should_send_email(alert_type, current_state)
        
        if current_state != "normal":
            self.create_alert("CR√çTICO", message, logger, send_email=should_send_email)
            return True
        
        return False
    
    def check_weather_alert(self, rain_probability: float, logger=None) -> bool:
        """Verifica se h√° alerta de chuva"""
        if rain_probability > 70:
            self.create_alert("ATEN√á√ÉO", f"Alta probabilidade de chuva: {rain_probability:.1f}%", logger)
            return True
        return False
    
    def _should_send_email(self, alert_type: str, current_state: str) -> bool:
        """Verifica se deve enviar email baseado no estado anterior e tempo"""
        now = datetime.now()
        
        # Verifica se houve mudan√ßa de estado
        if alert_type in self.last_alert_state:
            if self.last_alert_state[alert_type] == current_state:
                # Mesmo estado - verifica cooldown
                if alert_type in self.last_email_sent:
                    time_since_last = (now - self.last_email_sent[alert_type]).total_seconds()
                    if time_since_last < self.email_cooldown:
                        return False  # Ainda no cooldown
                else:
                    return True  # Primeiro email deste estado
            else:
                # Mudan√ßa de estado - sempre envia
                self.last_alert_state[alert_type] = current_state
                return True
        else:
            # Primeiro alerta deste tipo
            self.last_alert_state[alert_type] = current_state
            return True
        
        return True
    
    def create_alert(self, level: str, message: str, logger=None, send_email: bool = True, sensor_origem=None, valor_sensor=None):
        """Cria um novo alerta"""
        alert = {
            'timestamp': datetime.now(),
            'level': level,
            'message': message
        }
        self.alerts.append(alert)
        
        # Salva no banco de dados
        self._save_alert_to_database(level, message, sensor_origem, valor_sensor, send_email)
        
        # Se for um alerta cr√≠tico E deve enviar email, envia por SNS
        if level == "CR√çTICO" and send_email:
            # Formata a mensagem com mais detalhes
            subject = f"{message.split(':')[0]} - FarmTech"
            
            # Extrai informa√ß√µes da mensagem
            if "umidade" in message.lower():
                umidade = re.search(r'(\d+\.?\d*)%', message).group(1) if re.search(r'(\d+\.?\d*)%', message) else "N/A"
                detailed_message = f"""üö® Alerta de Umidade Cr√≠tica

üìä Detalhes do Alerta:
- Tipo: {'Umidade Baixa' if 'baixa' in message else 'Umidade Alta'}
- Valor: {umidade}%
- Timestamp: {alert['timestamp'].strftime('%d/%m/%Y %H:%M:%S')}

‚ö†Ô∏è A√ß√£o necess√°ria: Verificar sistema de irriga√ß√£o.

Este √© um alerta autom√°tico do sistema FarmTech Solutions."""
            else:
                detailed_message = f"""üö® Alerta do Sistema FarmTech

üìä Detalhes:
- Mensagem: {message}
- Timestamp: {alert['timestamp'].strftime('%d/%m/%Y %H:%M:%S')}

Este √© um alerta autom√°tico do sistema FarmTech Solutions."""
            
            self.sns_manager.publish_message(subject, detailed_message)
            
            # Atualiza timestamp do √∫ltimo email enviado
            alert_type = "humidity" if "umidade" in message.lower() else "general"
            self.last_email_sent[alert_type] = alert['timestamp']
            
            log_message = f"üìß Email enviado - Alerta criado: {level} - {message}"
        else:
            log_message = f"Alerta criado (sem email): {level} - {message}"
        
        if logger:
            logger.info(log_message)
        logging.info(log_message)
    
    def _save_alert_to_database(self, level: str, message: str, sensor_origem=None, valor_sensor=None, email_enviado=False):
        """Salva o alerta no banco de dados (funcionalidade desabilitada temporariamente)"""
        # Funcionalidade temporariamente desabilitada
        # Os alertas s√£o mantidos apenas em mem√≥ria por enquanto
        logging.info(f"Alerta registrado em mem√≥ria: {level} - {message}")
    
    def display_alerts(self):
        """Exibe os alertas no dashboard"""
        st.title("Sistema de Alertas")
        
        # Configura√ß√µes de Email
        with st.expander("‚öôÔ∏è Configura√ß√µes de Email", expanded=False):
            col1, col2 = st.columns(2)
            with col1:
                cooldown_minutes = st.slider(
                    "Intervalo entre emails (minutos):",
                    min_value=1,
                    max_value=60,
                    value=int(self.email_cooldown / 60),
                    help="Tempo m√≠nimo entre emails do mesmo tipo de alerta"
                )
                if st.button("Aplicar Configura√ß√£o"):
                    self.email_cooldown = cooldown_minutes * 60
                    st.success(f"Intervalo configurado para {cooldown_minutes} minutos")
            
            with col2:
                st.write("**Status dos Alertas:**")
                if self.last_alert_state:
                    for alert_type, state in self.last_alert_state.items():
                        st.write(f"‚Ä¢ {alert_type.title()}: {state}")
                else:
                    st.write("Nenhum alerta ativo")
        
        # Bot√£o de teste SNS
        if st.button("Testar Alerta SNS", type="primary", use_container_width=True):
            self.test_sns_alert()
        
        # Gerenciador de Destinat√°rios
        st.subheader("üìß Gerenciador de Destinat√°rios")
        
        # Adicionar novo destinat√°rio
        with st.form("novo_destinatario"):
            email = st.text_input("Adicionar novo destinat√°rio de email:")
            submitted = st.form_submit_button("Adicionar Destinat√°rio", use_container_width=True)
            
            if submitted and email:
                self.add_recipient(email)
        
        # Lista de destinat√°rios
        st.subheader("Destinat√°rios Cadastrados")
        subscriptions = self.sns_manager.get_subscriptions()
        
        if not subscriptions:
            st.info("Nenhum destinat√°rio cadastrado.")
        else:
            for sub in subscriptions:
                col1, col2, col3 = st.columns([2, 2, 1])
                with col1:
                    st.write(f"üìß {sub['email']}")
                with col2:
                    status_icon = "üü°" if sub['status'] == 'Aguardando confirma√ß√£o' else "‚úÖ"
                    st.write(f"{status_icon} {sub['status']}")
                with col3:
                    if st.button("üóëÔ∏è Remover", key=f"remove_{sub['email']}"):
                        self.remove_recipient(sub['email'])
                        st.rerun()
        
        # Hist√≥rico de Alertas
        if self.alerts:
            st.divider()
            df = pd.DataFrame(self.alerts)
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df = df.sort_values('timestamp', ascending=False)
            
            # Contagem de alertas por n√≠vel
            alert_counts = df['level'].value_counts()
            
            # M√©tricas em cards
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "üî¥ Alertas Cr√≠ticos", 
                    alert_counts.get("CR√çTICO", 0),
                    delta=None,
                    delta_color="inverse"
                )
            with col2:
                st.metric(
                    "üü° Alertas de Aten√ß√£o", 
                    alert_counts.get("ATEN√á√ÉO", 0),
                    delta=None,
                    delta_color="inverse"
                )
            with col3:
                st.metric(
                    "üìä Total de Alertas",
                    len(df),
                    delta=None,
                    delta_color="inverse"
                )
            
            # Tabela de alertas
            st.write("### üìù Hist√≥rico de Alertas")
            
            def color_level(val):
                if val == "CR√çTICO":
                    return 'color: red; font-weight: bold'
                elif val == "ATEN√á√ÉO":
                    return 'color: orange; font-weight: bold'
                return ''
            
            # Adiciona √≠cones aos n√≠veis
            df['level'] = df['level'].apply(lambda x: f"{'üî¥' if x == 'CR√çTICO' else 'üü°'} {x}")
            
            styled_df = df.style\
                .format({'timestamp': lambda x: x.strftime('%d/%m/%Y %H:%M:%S')})\
                .applymap(color_level, subset=['level'])
            
            st.dataframe(
                styled_df,
                width=1000,
                column_config={
                    "timestamp": "Data/Hora",
                    "level": "N√≠vel",
                    "message": "Mensagem"
                }
            )
        else:
            st.info("Nenhum alerta registrado.")
    
    def clear_alerts(self, logger=None):
        """Limpa todos os alertas"""
        self.alerts = []
        log_message = "Todos os alertas foram limpos"
        if logger:
            logger.info(log_message)
        logging.info(log_message)
    

    
    def display_alerts_history(self):
        """Exibe p√°gina de hist√≥rico de alertas em desenvolvimento"""
        st.title("üìä Hist√≥rico de Alertas")
        
        # Container principal
        with st.container():
            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col2:
                st.markdown("""
                <div style="text-align: center; padding: 50px;">
                    <h2>üöß Em Desenvolvimento</h2>
                    <p style="font-size: 18px; color: #666;">
                        Esta funcionalidade est√° sendo desenvolvida e estar√° dispon√≠vel em breve.
                    </p>
                    <p style="font-size: 16px; color: #888;">
                        Por enquanto, voc√™ pode visualizar os alertas em tempo real na p√°gina principal do sistema de alertas.
                    </p>
                </div>
                """, unsafe_allow_html=True)
                
                # Bot√£o para voltar aos alertas
                if st.button("üîô Voltar aos Alertas", type="primary", use_container_width=True):
                    st.switch_page("pages/alerts.py")
    
    def get_alerts_summary(self):
        """Retorna resumo dos alertas em mem√≥ria"""
        if self.alerts:
            criticos = len([a for a in self.alerts if a['level'] == 'CR√çTICO'])
            ultimo = max([a['timestamp'] for a in self.alerts]) if self.alerts else None
            return {
                'total': len(self.alerts),
                'criticos': criticos,
                'ultimo': ultimo
            }
        return {'total': 0, 'criticos': 0, 'ultimo': None} 